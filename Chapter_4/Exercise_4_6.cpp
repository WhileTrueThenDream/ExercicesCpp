/********************************************************* Exercises from book C++ Crash Course by Lospinoso. ********************************************************** Exercice 4-6.* Experiment with your TimerClass. Create a timer and move it into a function that* performs some computationally intensive operation(for example, lots of math in a loop). * Verify that your timer behaves as you expect.      * \date last change: 29.09.2021* \author            amaia*/     #include <ctime>#include <cstdio>#include <unistd.h>#include <utility>#include <cstring>     struct TimerClass{            TimerClass(const char* name)    {        timestamp =  std::ctime(0);          std::strncpy(&timername[0], name, (sizeof(timername)-1));			           			    }          	    ~TimerClass(void)    {        time_t end_time = std::ctime(0);        printf("Destructor called: %s, Timer duration: %d \n", timername, (int)(end_time -timestamp));		    }             private:    time_t timestamp;              /* timestamp of objects creation time */	char timername[10];            /* timers name, 9 chars length max. */};     int main(void){    TimerClass myTimer{"Timer_1"}; 		double var1 = 1.2,var2 = 0.8, var3;		for(int i = 0; i < 50000; i++)	{		var3 = 33.8/(0.75*var1 + 0.85*var2)/25.2;	}		printf("value of var3: %f \n", var3);    return 0;	}